#version 410

in vec4 vPosition;
in vec3 vNormal;
in vec3 vTangent;
in vec3 vBiTangent;
in vec2 vTexCoord;

out vec4 FragColor;

uniform sampler2D DiffuseMap;
uniform sampler2D NormalMap;
uniform sampler2D SpecularMap;
uniform vec3 AmbientLight;
uniform vec3 LightDirection;
uniform vec3 LightColor;
uniform vec3 CameraPosition;
uniform float SpecularPower;

void main()
{
	vec4 Ka = texture( DiffuseMap, vTexCoord );
	vec4 Kd = texture( DiffuseMap, vTexCoord );
	vec4 Ks = texture( SpecularMap, vTexCoord );
	
	mat3 TBN = mat3(normalize( vTangent ), 
					normalize( vBiTangent ), 
					normalize( vNormal ));
	vec3 N = texture( NormalMap, vTexCoord ).xyz * 2 - 1;
	
	vec3 finNormal = normalize( TBN * N );
	
	float d = max( 0, 
				   dot( finNormal, normalize(LightDirection) )
				 );
	
	vec3 V = normalize( CameraPosition - vPosition.xyz );
	vec3 Rm = reflect( -LightDirection, finNormal );
	
	float is = max( 0, dot(V, Rm) );
	is = pow( is, SpecularPower );
	
	FragColor = (Ka * vec4( AmbientLight, 1 ));
	
	FragColor += (Kd * vec4( LightColor * d, 1 )) + 
				 (Ks * vec4( LightColor * is, 1 ));
}