#version 410

in vec2 fTexCoord;

out vec4 FragColour;

uniform sampler2D target;

// just sample the target and return the colour
vec4 Simple() {
	return texture(target, fTexCoord);
}

vec4 BoxBlur() {
	vec2 texel = 1.0f / textureSize(target, 0).xy;
	
	// 9-tap box kernel
	vec4 colour = texture(target, fTexCoord);
	colour += texture(target, fTexCoord + vec2(-texel.x, texel.y));
	colour += texture(target, fTexCoord + vec2(-texel.x, 0));
	colour += texture(target, fTexCoord + vec2(-texel.x, -texel.y));
	colour += texture(target, fTexCoord + vec2(0, texel.y));
	colour += texture(target, fTexCoord + vec2(0, -texel.y));
	colour += texture(target, fTexCoord + vec2(texel.x, texel.y));
	colour += texture(target, fTexCoord + vec2(texel.x, 0));
	colour += texture(target, fTexCoord + vec2(texel.x, -texel.y));
	
	return colour / 9;
}

vec4 Distort() {
	vec2 mid = vec2(0.5f);
	
	float distanceFromCentre = distance(fTexCoord, mid);
	vec2 normalizedCoord = normalize(fTexCoord - mid);
	float bias = distanceFromCentre + sin(distanceFromCentre * 15) * 0.02f;
	
	vec2 newCoord = mid + bias * normalizedCoord;
	return texture(target, newCoord);
}

//edge detection
float threshold(in float thr1, in float thr2 , in float val) {
 if (val < thr1) {return 0.0;}
 if (val > thr2) {return 1.0;}
 return val;
}

// averaged pixel intensity from 3 color channels
float avg_intensity(in vec4 pix) {
 return (pix.r + pix.g + pix.b)/3.;
}

vec4 get_pixel(in vec2 coords, in float dx, in float dy) {
 return texture2D(target,coords + vec2(dx, dy));
}

// returns pixel color
float IsEdge(in vec2 coords){
  float dxtex = 1.0 / textureSize(target, 0).x /*image width*/;
  float dytex = 1.0 / textureSize(target, 0).y /*image height*/;
  float pix[9];
  int k = -1;
  float delta;

  // read neighboring pixel intensities
  for (int i=-1; i<2; i++) {
   for(int j=-1; j<2; j++) {
    k++;
    pix[k] = avg_intensity(get_pixel(coords,float(i)*dxtex,
                                          float(j)*dytex));
   }
  }

  // average color differences around neighboring pixels
  delta = ( abs(pix[1]-pix[7]) + abs(pix[5]-pix[3]) + abs(pix[0]-pix[8]) + abs(pix[2]-pix[6]) )/4.;

  //return threshold(0.25,0.4,clamp(1.8*delta,0.0,1.0));
  if (delta >= 0.25) 
  {
	return 1;
  }
  return 0;
}


vec4 Greyscale()
{
	vec4 color = texture(target, fTexCoord);
	float grey = (color.r + color.g + color.b) / 3.;
	return vec4(grey, grey, grey, 1);
}

void main() {
	//FragColour = BoxBlur();
	//FragColour = Distort();
	FragColour = vec4(IsEdge(fTexCoord), IsEdge(fTexCoord), IsEdge(fTexCoord), 1);
	//FragColour = Greyscale();
}