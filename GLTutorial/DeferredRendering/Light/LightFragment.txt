#version 410

in vec2 fTexCoord;

in vec4 vShadowCoord;

// direction in view-space
uniform vec3 lightDirection;
uniform vec3 lightDiffuse;

uniform mat4 cameraView;
uniform vec3 cameraPosition;

uniform sampler2D positionTexture;
uniform sampler2D normalTexture;
uniform sampler2D specularMap;

uniform sampler2D shadowMap;

uniform mat4 clipToUV = mat4(vec4(0.5, 0.0, 0.0, 0.0),
							 vec4(0.0, 0.5, 0.0, 0.0),
							 vec4(0.0, 0.0, 0.5, 0.0),
							 vec4(0.5, 0.5, 0.5, 1.0));
uniform mat4 lightMatrix;

layout(location = 0) out vec3 lightTexture;
layout(location = 1) out vec3 specularTexture;

void main() {
	vec3 normal = normalize( texture(normalTexture, fTexCoord).xyz );
	vec3 position = texture(positionTexture, fTexCoord).xyz;
	
	
	vec4 viewDirection = cameraView * vec4(normalize(lightDirection), 0);
	float d = max(0, dot(normal, normalize(viewDirection.xyz)));
	//Shadow
		// Find World Position : Deproject from the Camera	
	vec4 worldPosition = inverse(cameraView) * vec4(position,1);
	vec4 lightProjected = lightMatrix * worldPosition;
	lightProjected = lightProjected/lightProjected.w;
		
	vec4 shadowPosition = clipToUV * lightProjected; // Need clipToUV uniform and lightMatrix uniform
	
	
		// Test the Shadow Position against the Shadow Map : (Using the shadow Position as UV coords!)
	bool isLit = shadowPosition.z < texture(shadowMap, shadowPosition.xy).z + 0.001;
	if (!isLit) {
		d = 0;
	}
	if (d > 0) {
		//Specular Calculation
		vec3 specular = texture(specularMap, fTexCoord).xyz;
		float specularPower = texture(specularMap, fTexCoord).a;
		
		float is = 0;
		if (specularPower > 0) {
			vec3 V = normalize( cameraPosition - position );
			vec3 Rm = reflect( -viewDirection.xyz, normal );
		
			is = max( 0, dot(V, Rm) );
			is = pow( is, specularPower );
		}
		
		//Output
		lightTexture = (lightDiffuse * d);
		specularTexture = (((specular * lightDiffuse) /* 0.1*/) * is);
	}
	if (d <= 0) {
		lightTexture = vec3(0);
		specularTexture = vec3(0);
	}
	//lightTexture = vec3(shadowPosition.z);
}