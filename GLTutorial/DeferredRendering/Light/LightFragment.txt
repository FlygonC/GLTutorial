#version 410

in vec2 fTexCoord;

//out vec3 LightOutput;

// direction in view-space
uniform vec3 lightDirection;
uniform vec3 lightDiffuse;

uniform mat4 cameraView;
uniform vec3 cameraPosition;

uniform sampler2D positionTexture;
uniform sampler2D normalTexture;
uniform sampler2D specularMap;

layout(location = 0) out vec3 lightTexture;
layout(location = 1) out vec3 specularTexture;

void main() {
	vec3 normal = normalize( texture(normalTexture, fTexCoord).xyz );
	vec3 position = texture(positionTexture, fTexCoord).xyz;
	
	
	vec4 viewDirection = cameraView * vec4(lightDirection, 0);
	float d = max(0, dot(normal, normalize(viewDirection.xyz)));
	
	//Specular Calculation
	vec3 specular = texture(specularMap, fTexCoord).xyz;
	float specularPower = texture(specularMap, fTexCoord).a;
	
	float is = 0;
	if (specularPower > 0) {
		vec3 V = normalize( cameraPosition - position );
		vec3 Rm = reflect( -lightDirection, normal );
	
		is = max( 0, dot(V, Rm) );
		is = pow( is, specularPower );
	}
	
	//Output
	if (d > 0) {
		lightTexture = (lightDiffuse * d);
		specularTexture = ((specular * 0.1) * is);
	}
}