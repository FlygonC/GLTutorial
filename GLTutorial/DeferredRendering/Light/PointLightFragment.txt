#version 410

out vec3 LightOutput;

// position in view-space
uniform vec3 lightPositionView;
uniform vec3 lightDiffuse;
uniform float lightRadius;

uniform mat4 cameraView;
uniform vec3 cameraPosition;

uniform sampler2D positionTexture;
uniform sampler2D normalTexture;
uniform sampler2D specularMap;

layout(location = 0) out vec3 lightTexture;
layout(location = 1) out vec3 specularTexture;

void main() {
	// calculate the texture coordinates for the fragment
	vec2 texCoord = gl_FragCoord.xy / textureSize(positionTexture, 0).xy;
	
	vec3 normal = normalize(texture(normalTexture, texCoord).xyz);
	vec3 position = texture(positionTexture, texCoord).xyz;
	
	vec3 toLight = lightPositionView - position;
	
	
	//vec4 viewDirection = cameraView * vec4(toLight, 0);
	float d = max(0, dot(normal, normalize(toLight)));
	
	if (d > 0) {
		// simple linear falloff
		float falloff = 1 - min(1, length(toLight) / lightRadius);
		// Exponential falloff
	//	float falloff = 1 - min(1, (length(toLight) * length(toLight)) / lightRadius);
		
		//Specular Calculation
		vec3 specular = texture(specularMap, texCoord).xyz;
		float specularPower = texture(specularMap, texCoord).a;
		
		float is = 0;
		if (specularPower > 0) {
			vec3 V = normalize( cameraPosition - position );
			vec3 Rm = reflect( -normalize(toLight), normal );
		
			is = max( 0, dot(V, Rm) );
			is = pow( is, specularPower );
		}
		
		//Output
		lightTexture = (lightDiffuse * d) * falloff;
		specularTexture = ((specular * lightDiffuse) * is) * falloff;
	} 
	if (d <= 0) {
		lightTexture = vec3(0);
		specularTexture = vec3(0);
	}
}